{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React, { Component, Fragment } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ListItem } from 'react-native-elements';\nimport { Avatar } from 'react-native-elements/dist/avatar/Avatar';\nimport { Chip } from 'react-native-elements/dist/buttons/Chip';\nimport * as constant from \"../controllers/constants.js\";\nimport firebase from \"../database/firebase.js\";\nimport * as secret from \"../controllers/secrets.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar IndexScreen = function (_Component) {\n  _inherits(IndexScreen, _Component);\n  var _super = _createSuper(IndexScreen);\n  function IndexScreen() {\n    var _this;\n    _classCallCheck(this, IndexScreen);\n    _this = _super.call(this);\n    _this.getCollection = function (querySnapshot) {\n      var contactArray = [];\n      querySnapshot.forEach(function (res) {\n        var _res$data = res.data(),\n          name = _res$data.name,\n          date = _res$data.date;\n        contactArray.push({\n          key: res.id,\n          res: res,\n          name: name,\n          date: date,\n          createAt: createAt\n        });\n      });\n      contactArray.sort(function (a, b) {\n        return a.name > b.name;\n      });\n      _this.setState({\n        contactArray: contactArray,\n        isLoading: false\n      });\n    };\n    _this.firestoreRef = firebase.firestore().collection(secret.databaseTable);\n    _this.state = {\n      isLoading: true,\n      contactArray: []\n    };\n    return _this;\n  }\n  _createClass(IndexScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.unsubscribe = this.firestoreRef.onSnapshot(this.getCollection);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubscribe();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      if (this.state.isLoading) {\n        return _jsx(View, {\n          style: styles.preloader,\n          children: _jsx(ActivityIndicator, {\n            size: \"large\",\n            color: constant.activityIndicatorColor\n          })\n        });\n      }\n      return _jsxs(Fragment, {\n        children: [_jsx(ScrollView, {\n          style: styles.container,\n          children: this.state.contactArray.map(function (item, i) {\n            var initials = item.name.split(' ').map(function (n) {\n              return n[0];\n            }).join('');\n            return _jsxs(ListItem, {\n              bottomDivider: true,\n              onPress: function onPress() {\n                _this2.props.navigation.navigate(constant.toDetailsScreen, {\n                  userkey: item.key\n                });\n              },\n              children: [_jsx(Avatar, {\n                rounded: true,\n                title: initials,\n                overlayContainerStyle: {\n                  backgroundColor: constant.backgroundColor\n                }\n              }), _jsxs(ListItem.Content, {\n                children: [_jsx(ListItem.Title, {\n                  children: item.name\n                }), _jsx(ListItem.Subtitle, {\n                  children: item.date\n                })]\n              })]\n            }, i);\n          })\n        }), _jsx(View, {\n          style: styles.bottom,\n          children: _jsx(Chip, {\n            title: \"New Meeting\",\n            onPress: function onPress() {\n              return _this2.props.navigation.navigate(constant.toFormScreen);\n            },\n            icon: {\n              name: 'add',\n              size: 20,\n              color: 'white'\n            }\n          })\n        })]\n      });\n    }\n  }]);\n  return IndexScreen;\n}(Component);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingBottom: 20\n  },\n  preloader: {\n    flex: 3,\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  bottom: {\n    position: 'absolute',\n    right: 10,\n    bottom: 10,\n    alignSelf: 'flex-end'\n  }\n});\nexport default IndexScreen;","map":{"version":3,"names":["React","Component","Fragment","StyleSheet","ScrollView","ActivityIndicator","View","ListItem","Avatar","Chip","constant","firebase","secret","jsx","_jsx","jsxs","_jsxs","IndexScreen","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","getCollection","querySnapshot","contactArray","forEach","res","_res$data","data","name","date","push","key","id","createAt","sort","a","b","setState","isLoading","firestoreRef","firestore","collection","databaseTable","state","_createClass","value","componentDidMount","unsubscribe","onSnapshot","componentWillUnmount","render","_this2","style","styles","preloader","children","size","color","activityIndicatorColor","container","map","item","i","initials","split","n","join","bottomDivider","onPress","props","navigation","navigate","toDetailsScreen","userkey","rounded","title","overlayContainerStyle","backgroundColor","Content","Title","Subtitle","bottom","toFormScreen","icon","create","flex","paddingBottom","left","right","top","alignItems","justifyContent","position","alignSelf"],"sources":["C:/Users/tuanv/Desktop/react-android/screens/IndexScreen.js"],"sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { StyleSheet, ScrollView, ActivityIndicator, View } from 'react-native';\r\nimport { ListItem } from 'react-native-elements'\r\nimport { Avatar } from 'react-native-elements/dist/avatar/Avatar';\r\nimport { Chip } from 'react-native-elements/dist/buttons/Chip';\r\n\r\n// Import constants.js, secrets.js and database.js.\r\nimport * as constant from '../controllers/constants.js'\r\n\r\nimport firebase from '../database/firebase.js';\r\nimport * as secret from '../controllers/secrets.js'\r\nclass IndexScreen extends Component {\r\n  constructor() {\r\n    super();\r\n    this.firestoreRef = firebase.firestore().collection(secret.databaseTable);\r\n    this.state = {\r\n      isLoading: true,\r\n      contactArray: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.unsubscribe = this.firestoreRef.onSnapshot(this.getCollection);\r\n  }\r\n\r\n  // To prevent memory leak.\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  }\r\n\r\n  // Renders the data from the Firebase database and sets the loader to false when fetched.\r\n  getCollection = (querySnapshot) => {\r\n    const contactArray = [];\r\n    querySnapshot.forEach((res) => {\r\n      const { name, date } = res.data();\r\n      contactArray.push({\r\n        key: res.id,\r\n        res,\r\n        name,\r\n        date,\r\n        createAt,\r\n      });\r\n    });\r\n\r\n    // Sort the output by it's name.\r\n    contactArray.sort((a, b) => a.name > b.name);\r\n    \r\n    this.setState({\r\n      contactArray,\r\n      isLoading: false,\r\n   });\r\n  }\r\n\r\n  render() {\r\n    if(this.state.isLoading){\r\n      return(\r\n        <View style={styles.preloader}>\r\n          <ActivityIndicator size = 'large' color = {constant.activityIndicatorColor}/>\r\n        </View>\r\n      )\r\n    }    \r\n    return (\r\n      <Fragment>\r\n        <ScrollView style = {styles.container}>\r\n            {\r\n              this.state.contactArray.map((item, i) => {\r\n                var initials = item.name.split(' ').map((n) => n[0]).join('');\r\n\r\n                return (\r\n                  <ListItem \r\n                  key={i} \r\n                  bottomDivider\r\n                  onPress = {() => {\r\n                        this.props.navigation.navigate(constant.toDetailsScreen, { userkey: item.key });\r\n                      }}>\r\n                    <Avatar\r\n                    rounded\r\n                    title = {initials}\r\n                    overlayContainerStyle={{backgroundColor: constant.backgroundColor}}/>\r\n                    <ListItem.Content>\r\n                      <ListItem.Title>{item.name}</ListItem.Title>\r\n                      <ListItem.Subtitle>{item.date}</ListItem.Subtitle>\r\n                    </ListItem.Content>\r\n                  </ListItem>\r\n                );\r\n              })\r\n            }\r\n        </ScrollView>\r\n        <View style = {styles.bottom}>\r\n          <Chip\r\n            // iconRight\r\n            title = 'New Meeting'\r\n            onPress = {() => this.props.navigation.navigate(constant.toFormScreen)} \r\n            // color = {constant.buttonColor}\r\n            icon={{\r\n              name: 'add',\r\n              size: 20,\r\n              color: 'white'\r\n            }}\r\n          />\r\n        </View>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n   flex: 1,\r\n   paddingBottom: 20\r\n  },\r\n  preloader: {\r\n    flex: 3,\r\n    left: 0,\r\n    right: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  bottom: {\r\n    position: 'absolute',\r\n    right: 10,\r\n    bottom: 10,\r\n    alignSelf: 'flex-end'\r\n  }\r\n})\r\n\r\nexport default IndexScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}